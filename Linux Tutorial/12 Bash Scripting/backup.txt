------------------------------------------------------------------------------------------------------------------------
#!/bin/bash
# Backs up a single project directory
# Ryan 19/6/2024
 
if [ $# != 1 ]
then
    echo Usage: A single argument which is the directory to backup
    exit
fi
if [ ! -d ~/projects/$1 ]
then
    echo 'The given directory does not seem to exist (possible typo?)'
    exit
fi
date=`date +%F`
 
# Do we already have a backup folder for todays date?
if [ -d ~/projectbackups/$1_$date ]
then
    echo 'This project has already been backed up today, overwrite?'
    read answer
    if [ $answer != 'y' ]
    then
        exit
    fi
else
    mkdir ~/projectbackups/$1_$date
fi
cp -R ~/projects/$1 ~/projectbackups/$1_$date
echo Backup of $1 completed


Line 6 Our first if statement. The formatting is important. Note where the spaces are as they are required for it to work
       properly. In this statement we are asking if the number of arguments ( $# ) is not equal to ( != ) one.
Line 8 If not then the script has not been properly invoked. Print a message explaining how it should be used.
Line 9 Because the script has not been invoked properly we wish to exit the script before going any further.
Line 10 To indicate the end of an if statement we have a single line which has fi (if backwards) on it.
Line 11 If statements can test a lot of different things. Here the exclamation mark ( ! ) means not, the -d means
        'the path exists and is a directory'. So the line reads as 'If the given directory does not exist'
Line 22 It is possible to ask the user for input. The command we use for that is read. read takes a single argument
        which is the variable to store the answer in.
Line 23 Let's see how the user responded and act accordingly.