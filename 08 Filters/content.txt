Filters

A filter, in the context of the Linux command line, is a program that accepts textual data and then transforms it
in a particular way. Filters are a way to take raw data, either produced by another program, or stored in a file,
and manipulate it to be displayed in a way more suited.

head

Head is a program that prints the first so many lines of it's input. By default it will print the first 10 lines.

head [-number of lines to print] [path]
head -4 mysampledata.txt

Tail

Tail is the opposite of head. Tail is a program that prints the last so many lines of it's input. By default it will print the last 10 lines.

tail [-number of lines to print] [path]
tail -3 mysampledata.txt

Sort

Sort will sort it's input, nice and simple. By default it will sort alphabetically.

sort [-options] [path]

nl - number of lines
nl [-options] [path]

nl -s '. ' -w 10 mysampledata.txt
2 command line options. The first one -s specifies what should be printed after the
number while the second one -w specifies how much padding to put before the numbers.

wc - word count
wc [-options] [path]
-l will give us lines only, -w will give us words and -m will give us characters.

cut
Use if your content is separated into fields (columns) and you only want certain fields.

cut [-options] [path]

In our sample file we have our data in 3 columns, the first is a name, the second is a fruit and the third an amount.
Let's say we only wanted the first column.

cut -f 1 -d ' ' mysampledata.txt

The separator character may be anything you like, for instance in a CSV file the separator is typically a comma ( , ).
This is what the -d option does (we include the space within single quotes so it knows this is part of the argument).
The -f option allows us to specify which field or fields we would like. If we wanted 2 or more fields then we separate
them with a comma

cut -f 1,2 -d ' ' mysampledata.txt

sed - Stream Editor
It effectively allows us to do a search and replace on our data.

sed <expression> [path]

A basic expression is of the following format:

s/search/replace/g
s - substitute
search - word for searching
replace - replacement
g - global

sed 's/oranges/bananas/g' mysampledata.txt

sed does not identify words but strings of characters.

uniq - unique
It's job is to remove duplicate lines from the data. One limitation however is that those lines must be adjacent.

uniq [options] [path]

tac 

The program tac is actually cat in reverse. It was named this as it does the opposite of cat.
Given data it will print the last line first, through to the first line.

tac [path]

awk

The awk command is a powerful text-processing tool in Unix-like operating systems.
It is used for pattern scanning and processing. awk interprets a special-purpose programming language to do this job.

awk 'pattern {action}' file
pattern: Specifies the condition under which the action is performed.
action: Specifies what to do when the pattern matches.

awk '{print}' filename
This prints all the lines in the file.

awk '{print $1, $3}' filename
This prints the first and third columns of each line from the file. Columns are separated by spaces by default.

awk '/pattern/ {print}' filename
This prints all lines that match the specified pattern.
awk '/Terry/ {print}' mysampledata.txt 
Terry oranges 9

awk '$3 > 100' filename
This prints lines where the third column is greater than 100.

awk -F, '{print $1, $2}' filename
This treats the comma as the field separator and prints the first and second columns.

awk '{sum += $2} END {print sum}' filename
This calculates and prints the sum of the second column.

awk 'END {print NR}' filename
NR is a built-in variable that holds the number of records (lines) processed. This prints the number of lines in the file.

awk '{sum += $2} END {print "Sum:", sum; print "Average:", sum/NR}' filename
This calculates and prints the sum and average of the second column.

diff

Iis used to compare the contents of two files line by line. It outputs the differences between the files, making it a valuable tool for
tracking changes in files, especially in programming and configuration management.

diff [options] file1 file2

Basic file comparison
diff file1.txt file2.txt

Side-by-side comparison
diff -y file1.txt file2.txt

Ignoring whitespace differences
diff -w file1.txt file2.txt

Unified format output
diff -u file1.txt file2.txt

Creating a patch file
diff -u file1.txt file2.txt > file.diff
This creates a patch file, file.diff, which can be applied later using the patch command to update file1.txt
to the contents of file2.txt.

file1.txt

Hello
World
This is a test.

file2.txt

Hello
Universe
This is a test!

Running diff file1.txt file2.txt gives the following output:
2c2
< World
---
> Universe
3c3
< This is a test.
---
> This is a test!

Explanation of the output:

2c2: Line 2 in file1.txt is changed in line 2 of file2.txt.
< World: The line from file1.txt.
---: Separator indicating difference.
> Universe: The line from file2.txt.
3c3: Line 3 in file1.txt is changed in line 3 of file2.txt.
< This is a test.: The line from file1.txt.
> This is a test!: The line from file2.txt.